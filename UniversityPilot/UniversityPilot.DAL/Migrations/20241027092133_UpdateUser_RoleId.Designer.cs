// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using UniversityPilot.DAL;

#nullable disable

namespace UniversityPilot.DAL.Migrations
{
    [DbContext(typeof(UniversityPilotContext))]
    [Migration("20241027092133_UpdateUser_RoleId")]
    partial class UpdateUser_RoleId
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CourseCourseGroup", b =>
                {
                    b.Property<int>("CourseGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.HasKey("CourseGroupsId", "CoursesId");

                    b.HasIndex("CoursesId");

                    b.ToTable("CourseGroupCourse", (string)null);
                });

            modelBuilder.Entity("CourseFieldOfStudy", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("FieldOfStudiesId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "FieldOfStudiesId");

                    b.HasIndex("FieldOfStudiesId");

                    b.ToTable("CourseFieldOfStudy", (string)null);
                });

            modelBuilder.Entity("CourseGroupStudent", b =>
                {
                    b.Property<int>("CourseGroupsId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("CourseGroupsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentCourseGroup", (string)null);
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("InstructorsId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "InstructorsId");

                    b.HasIndex("InstructorsId");

                    b.ToTable("InstructorCourse", (string)null);
                });

            modelBuilder.Entity("CourseSpecialization", b =>
                {
                    b.Property<int>("CoursesId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationsId")
                        .HasColumnType("integer");

                    b.HasKey("CoursesId", "SpecializationsId");

                    b.HasIndex("SpecializationsId");

                    b.ToTable("CourseSpecialization", (string)null);
                });

            modelBuilder.Entity("FieldOfStudySpecialization", b =>
                {
                    b.Property<int>("FieldOfStudiesId")
                        .HasColumnType("integer");

                    b.Property<int>("SpecializationsId")
                        .HasColumnType("integer");

                    b.HasKey("FieldOfStudiesId", "SpecializationsId");

                    b.HasIndex("SpecializationsId");

                    b.ToTable("SpecializationFieldOfStudy", (string)null);
                });

            modelBuilder.Entity("FieldOfStudyStudent", b =>
                {
                    b.Property<int>("FieldOfStudiesId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("FieldOfStudiesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentFieldOfStudy", (string)null);
                });

            modelBuilder.Entity("FieldOfStudyStudySchedule", b =>
                {
                    b.Property<int>("FieldOfStudiesId")
                        .HasColumnType("integer");

                    b.Property<int>("StudySchedulesId")
                        .HasColumnType("integer");

                    b.HasKey("FieldOfStudiesId", "StudySchedulesId");

                    b.HasIndex("StudySchedulesId");

                    b.ToTable("FieldOfStudySchedules", (string)null);
                });

            modelBuilder.Entity("SpecializationStudent", b =>
                {
                    b.Property<int>("SpecializationsId")
                        .HasColumnType("integer");

                    b.Property<int>("StudentsId")
                        .HasColumnType("integer");

                    b.HasKey("SpecializationsId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("StudentSpecialization", (string)null);
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.Identity.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.Identity.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("character varying(13)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("EmailIsConfirmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(24)
                        .HasColumnType("character varying(24)");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.StudyOrganization.Models.Course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CourseCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<float>("CourseDuration")
                        .HasColumnType("real");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("CourseTypeId")
                        .HasColumnType("integer");

                    b.Property<int>("Credits")
                        .HasColumnType("integer");

                    b.Property<bool>("Online")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("CourseTypeId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.StudyOrganization.Models.CourseType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CourseTypes");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.StudyOrganization.Models.FieldOfStudy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FormOfStudy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LevelOfEducation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("FieldsOfStudy");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.StudyOrganization.Models.Specialization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.ToTable("Specializations");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Classroom", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Floor")
                        .HasColumnType("integer");

                    b.Property<string>("RoomNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("SeatCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Classrooms");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.CourseGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("CourseGroups");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.CourseSchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("ClassroomId")
                        .HasColumnType("integer");

                    b.Property<int>("CourseGroupId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("InstructorId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ClassroomId");

                    b.HasIndex("CourseGroupId");

                    b.HasIndex("InstructorId");

                    b.ToTable("CourseSchedules");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Holiday", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("Holidays");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.StudySchedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("StudySchedules");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Instructor", b =>
                {
                    b.HasBaseType("UniversityPilot.DAL.Areas.Identity.Models.User");

                    b.Property<string>("ContractType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasDiscriminator().HasValue("Instructor");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Student", b =>
                {
                    b.HasBaseType("UniversityPilot.DAL.Areas.Identity.Models.User");

                    b.Property<int>("Indeks")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("CourseCourseGroup", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.CourseGroup", null)
                        .WithMany()
                        .HasForeignKey("CourseGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseFieldOfStudy", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.FieldOfStudy", null)
                        .WithMany()
                        .HasForeignKey("FieldOfStudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseGroupStudent", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.CourseGroup", null)
                        .WithMany()
                        .HasForeignKey("CourseGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseInstructor", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Instructor", null)
                        .WithMany()
                        .HasForeignKey("InstructorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CourseSpecialization", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.Course", null)
                        .WithMany()
                        .HasForeignKey("CoursesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldOfStudySpecialization", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.FieldOfStudy", null)
                        .WithMany()
                        .HasForeignKey("FieldOfStudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldOfStudyStudent", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.FieldOfStudy", null)
                        .WithMany()
                        .HasForeignKey("FieldOfStudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FieldOfStudyStudySchedule", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.FieldOfStudy", null)
                        .WithMany()
                        .HasForeignKey("FieldOfStudiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.StudySchedule", null)
                        .WithMany()
                        .HasForeignKey("StudySchedulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SpecializationStudent", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.Specialization", null)
                        .WithMany()
                        .HasForeignKey("SpecializationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.Identity.Models.User", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.Identity.Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.StudyOrganization.Models.Course", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.StudyOrganization.Models.CourseType", "CourseType")
                        .WithMany("Courses")
                        .HasForeignKey("CourseTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CourseType");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.CourseSchedule", b =>
                {
                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Classroom", "Classroom")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("ClassroomId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.CourseGroup", "CourseGroup")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("CourseGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Instructor", "Instructor")
                        .WithMany("CourseSchedules")
                        .HasForeignKey("InstructorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Classroom");

                    b.Navigation("CourseGroup");

                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.Identity.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.StudyOrganization.Models.CourseType", b =>
                {
                    b.Navigation("Courses");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Classroom", b =>
                {
                    b.Navigation("CourseSchedules");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.CourseGroup", b =>
                {
                    b.Navigation("CourseSchedules");
                });

            modelBuilder.Entity("UniversityPilot.DAL.Areas.UniversityAndScheduling.Models.Instructor", b =>
                {
                    b.Navigation("CourseSchedules");
                });
#pragma warning restore 612, 618
        }
    }
}
